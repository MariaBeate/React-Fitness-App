{"ast":null,"code":"var _jsxFileName = \"/Users/katharina/Desktop/Webmo_Melli/React-Fitness-App/frontend/src/User/FitnessplanUser.js\";\nimport React, { Component } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport \"../Fitnessplan.css\";\nexport default class FitnessplanAdmin extends Component {\n  constructor(...args) {\n    super(...args);\n    this.calendarComponentRef = React.createRef();\n    this.state = {\n      courseList: [],\n      calendarWeekends: true,\n      calendarEvents: [// initial event data\n      {\n        title: \"Event Now\",\n        start: new Date()\n      }]\n    };\n\n    this.handleEventClick = info => {\n      alert('Event: ' + info.event.title);\n    };\n\n    this.handleDateClick = selectInfo => {\n      let title = prompt('Please enter a new title for your event');\n      let calendarApi = selectInfo.view.calendar; //calendarApi.unselect() // clear date selection\n\n      if (title) {\n        calendarApi.addEvent({\n          id: \"\",\n          title,\n          start: selectInfo.startStr,\n          end: selectInfo.endStr,\n          allDay: selectInfo.allDay\n        });\n      }\n    };\n\n    this.toggleWeekends = () => {\n      this.setState({\n        // update a property\n        calendarWeekends: !this.state.calendarWeekends\n      });\n    };\n\n    this.gotoPast = () => {\n      let calendarApi = this.calendarComponentRef.current.getApi();\n      calendarApi.gotoDate(\"2020-01-01\"); // call a method on the Calendar object\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:9000/api/fitness\").then(response => response.json()).then(fitness => {\n      this.setState({\n        courseList: fitness\n      });\n    });\n  }\n\n  render() {\n    const {\n      courseList\n    } = this.state;\n    console.log(courseList);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fitnessplan\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }\n    }, \"Kursplan\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fitness-calendar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FullCalendar, {\n      defaultView: \"timeGridWeek\",\n      header: {\n        left: \"prev,next today\",\n        center: \"title\",\n        right: \"dayGridMonth,timeGridWeek,timeGridDay,listWeek\"\n      },\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      editable: true //change length of event by dragging the event down. Change day of event by dragging\n      ,\n      eventContent: this.renderEventContent,\n      eventDrop: this.handleEventDrop,\n      eventClick: this.handleEventClick,\n      select: this.handleDateSelect //eventClick = {function(calendarEvents, jsEvent, view, resourceObj) {alert(courseList.title)}}\n      ,\n      ref: this.calendarComponentRef,\n      weekends: this.state.calendarWeekends //events={this.state.calendarEvents}\n      ,\n      events: courseList //Funktioniert theoretisch. \n      ,\n      dateClick: this.handleDateClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    })));\n  }\n\n  renderEventContent(eventInfo) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }, \"hey\"), /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, \"hu\"));\n  }\n  /* handleDateClick = (arg) => {\n    if (\n      window.confirm(\"Would you like to add an event to \" + arg.dateStr + \" ?\")\n    ) {\n      this.setState({\n        // add new event data\n        calendarEvents: this.state.calendarEvents.concat({\n          // creates a new array\n          title: \"New Event\",\n          start: arg.date,\n          allDay: arg.allDay,\n        }),\n      });\n    }\n  }; */\n\n\n}","map":{"version":3,"sources":["/Users/katharina/Desktop/Webmo_Melli/React-Fitness-App/frontend/src/User/FitnessplanUser.js"],"names":["React","Component","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","FitnessplanAdmin","calendarComponentRef","createRef","state","courseList","calendarWeekends","calendarEvents","title","start","Date","handleEventClick","info","alert","event","handleDateClick","selectInfo","prompt","calendarApi","view","calendar","addEvent","id","startStr","end","endStr","allDay","toggleWeekends","setState","gotoPast","current","getApi","gotoDate","componentDidMount","fetch","then","response","json","fitness","render","console","log","left","center","right","renderEventContent","handleEventDrop","handleDateSelect","eventInfo"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport \"../Fitnessplan.css\";\n\nexport default class FitnessplanAdmin extends Component {\n  calendarComponentRef = React.createRef();\n  state = {\n    courseList: [],\n    calendarWeekends: true,\n    calendarEvents: [\n      // initial event data\n      { title: \"Event Now\", start: new Date() },\n    ],\n  };\n\n  componentDidMount() {\n    fetch(\"http://localhost:9000/api/fitness\")\n      .then((response) => response.json())\n      .then((fitness) => {\n        this.setState({ courseList: fitness });\n      });\n  }\n\n  render() {\n    const{ courseList } = this.state;\n    console.log(courseList)\n    return (\n      <div className=\"fitnessplan\">\n      <div className=\"heading\">\n      Kursplan\n      </div>\n        <div className=\"fitness-calendar\">\n        <FullCalendar\n          defaultView=\"timeGridWeek\"\n          header={{\n            left: \"prev,next today\",\n            center: \"title\",\n            right: \"dayGridMonth,timeGridWeek,timeGridDay,listWeek\",\n          }}\n          plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n          editable={true}  //change length of event by dragging the event down. Change day of event by dragging\n          eventContent={this.renderEventContent}\n          eventDrop={this.handleEventDrop}\n          eventClick={this.handleEventClick}\n          select={this.handleDateSelect}\n          //eventClick = {function(calendarEvents, jsEvent, view, resourceObj) {alert(courseList.title)}}\n          ref={this.calendarComponentRef}\n          weekends={this.state.calendarWeekends}\n          //events={this.state.calendarEvents}\n          events={courseList}    //Funktioniert theoretisch. \n          dateClick={this.handleDateClick}\n          \n\n        />\n      </div>\n     </div>\n  );\n}\n\nhandleEventClick = (info) => {\n  alert('Event: ' + info.event.title);\n}\n\nhandleDateClick = (selectInfo) => {\n  let title = prompt('Please enter a new title for your event')\n  let calendarApi = selectInfo.view.calendar\n\n  //calendarApi.unselect() // clear date selection\n\n  if (title) {\n    calendarApi.addEvent({\n      id:\"\",\n      title,\n      start: selectInfo.startStr,\n      end: selectInfo.endStr,\n      allDay: selectInfo.allDay\n    })\n  }\n}\n\nrenderEventContent(eventInfo) {\n  return (\n    <>\n      <b>{\"hey\"}</b>\n      <i>{\"hu\"}</i>\n    </>\n  )\n}\n\ntoggleWeekends = () => {\n  this.setState({\n    // update a property\n    calendarWeekends: !this.state.calendarWeekends,\n  });\n};\n\ngotoPast = () => {\n  let calendarApi = this.calendarComponentRef.current.getApi();\n  calendarApi.gotoDate(\"2020-01-01\"); // call a method on the Calendar object\n};\n\n/* handleDateClick = (arg) => {\n  if (\n    window.confirm(\"Would you like to add an event to \" + arg.dateStr + \" ?\")\n  ) {\n    this.setState({\n      // add new event data\n      calendarEvents: this.state.calendarEvents.concat({\n        // creates a new array\n        title: \"New Event\",\n        start: arg.date,\n        allDay: arg.allDay,\n      }),\n    });\n  }\n}; */\n}"]},"metadata":{},"sourceType":"module"}