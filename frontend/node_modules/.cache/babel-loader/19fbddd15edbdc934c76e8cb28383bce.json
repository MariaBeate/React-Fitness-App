{"ast":null,"code":"var _jsxFileName = \"/Users/katharina/Desktop/Webmo_Melli/React-Fitness-App/frontend/src/Admin/FitnessplanAdmin.js\";\nimport React, { Component } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport \"../Fitnessplan.css\";\nexport default class FitnessplanAdmin extends Component {\n  constructor(...args) {\n    super(...args);\n    this.calendarComponentRef = React.createRef();\n    this.state = {\n      // courses: [],\n      events: [],\n      event: {\n        title: \"\",\n        date: \"\"\n      },\n      calendarWeekends: true,\n      calendarEvents: [// initial event data\n      {\n        name: \"Event Now\",\n        start: new Date()\n      }]\n    };\n\n    this.handleDateClick = arg => {\n      var dateStr = prompt('Enter a date in YYYY-MM-DD format');\n      var date = new Date(arg.dateStr + 'T00:00:00');\n\n      if (!isNaN(date.valueOf())) {\n        // valid?\n        fitnessplan.addEvent({\n          title: 'dynamic event',\n          start: date,\n          allDay: true\n        });\n        alert('Great. Now, update your database...');\n      } else {\n        alert('Invalid date.');\n      } //calendarApi.unselect() // clear date selection\n      // if (name) {\n      //   calendarApi.addEvent({\n      //     id:\"\",\n      //     name,\n      //     start: selectInfo.startStr,\n      //     end: selectInfo.endStr,\n      //     allDay: selectInfo.allDay\n      //   })\n      // }\n\n    };\n\n    this.toggleWeekends = () => {\n      this.setState({\n        // update a property\n        calendarWeekends: !this.state.calendarWeekends\n      });\n    };\n\n    this.gotoPast = () => {\n      let calendarApi = this.calendarComponentRef.current.getApi();\n      calendarApi.gotoDate(\"2020-01-01\"); // call a method on the Calendar object\n    };\n  }\n\n  // componentDidMount() {\n  //   fetch(\"http://localhost:9000/api/fitness\")\n  //     .then((response) => response.json())\n  //     .then((course) => {\n  //       this.setState({ courses: course });\n  //     });\n  // }\n  componentDidMount() {\n    fetch(\"http://localhost:9000/api/fitnessevents\").then(response => response.json()).then(event => {\n      this.setState({\n        events: event\n      });\n    });\n  }\n\n  render() {\n    const {\n      events\n    } = this.state;\n    const {\n      courses\n    } = this.state;\n    console.log(courses);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fitnessplan\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, \"Kursplan\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"heading sub\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, \"Klicke auf ein Datum, um einen neuen Kurs hinzuzuf\\xFCgen\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.toggleWeekends,\n      className: \"button add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, \"Ohne Wochenenden\"), \"\\xA0\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fitness-calendar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FullCalendar, {\n      defaultView: \"timeGridWeek\",\n      header: {\n        left: \"prev,next today\",\n        center: \"name\",\n        right: \"dayGridMonth,timeGridWeek,timeGridDay,listWeek\"\n      },\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin] // editable={true}  //change length of event by dragging the event down. Change day of event by dragging\n      // eventContent={this.renderEventContent}\n      // eventDrop={this.handleEventDrop}\n      // eventClick={this.handleEventClick}\n      // select={this.handleDateSelect}\n      //eventClick = {function(calendarEvents, jsEvent, view, resourceObj) {alert(courses.name)}}\n      ,\n      ref: this.calendarComponentRef,\n      weekends: this.state.calendarWeekends //events={this.state.calendarEvents}\n      ,\n      events: this.state.events //Funktioniert theoretisch. \n      ,\n      dateClick: this.handleDateClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    })));\n  } // handleEventClick = (info) => {\n  //   alert('Event: ' + info.event.name);\n  // }\n  //  handleDateClick = (arg) => {\n  //     if (\n  //       window.confirm(\"Would you like to add an event to \" + arg.dateStr + \" ?\")\n  //     ) {\n  //       this.setState({\n  //         // add new event data\n  //         events: this.state.events.concat({\n  //           // creates a new array\n  //           title: \"New Event\",\n  //           start: arg.date,\n  //           allDay: arg.allDay,\n  //         }),\n  //       });\n  //     }\n  //   }; \n\n\n}","map":{"version":3,"sources":["/Users/katharina/Desktop/Webmo_Melli/React-Fitness-App/frontend/src/Admin/FitnessplanAdmin.js"],"names":["React","Component","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","FitnessplanAdmin","calendarComponentRef","createRef","state","events","event","title","date","calendarWeekends","calendarEvents","name","start","Date","handleDateClick","arg","dateStr","prompt","isNaN","valueOf","fitnessplan","addEvent","allDay","alert","toggleWeekends","setState","gotoPast","calendarApi","current","getApi","gotoDate","componentDidMount","fetch","then","response","json","render","courses","console","log","left","center","right"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport \"../Fitnessplan.css\";\r\n\r\nexport default class FitnessplanAdmin extends Component {\r\n  calendarComponentRef = React.createRef();\r\n  state = {\r\n    // courses: [],\r\n    events: [],\r\n    event: {\r\n      title: \"\",\r\n      date: \"\",\r\n        },\r\n    \r\n    calendarWeekends: true,\r\n    calendarEvents: [\r\n      // initial event data\r\n      { name: \"Event Now\", start: new Date() },\r\n    ],\r\n  };\r\n\r\n  // componentDidMount() {\r\n  //   fetch(\"http://localhost:9000/api/fitness\")\r\n  //     .then((response) => response.json())\r\n  //     .then((course) => {\r\n  //       this.setState({ courses: course });\r\n  //     });\r\n  // }\r\n\r\n  componentDidMount() {\r\n    fetch(\"http://localhost:9000/api/fitnessevents\")\r\n      .then((response) => response.json())\r\n      .then((event) => {\r\n        this.setState({ events: event });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const{ events } = this.state;\r\n    const{ courses } = this.state;\r\n    console.log(courses)\r\n    return (\r\n      <div className=\"fitnessplan\">\r\n        <div className=\"heading\">\r\n        Kursplan\r\n        <div className=\"heading sub\">\r\n        Klicke auf ein Datum, um einen neuen Kurs hinzuzufügen\r\n        </div>\r\n        <div>\r\n        <button onClick={this.toggleWeekends} className=\"button add\" >Ohne Wochenenden</button>&nbsp;\r\n          {/* <button onClick={this.gotoPast}>go to a date in the past</button> */}\r\n        </div>\r\n        </div>\r\n        <div className=\"fitness-calendar\">\r\n          <FullCalendar\r\n            defaultView=\"timeGridWeek\"\r\n            header={{\r\n              left: \"prev,next today\",\r\n              center: \"name\",\r\n              right: \"dayGridMonth,timeGridWeek,timeGridDay,listWeek\",\r\n            }}\r\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n            // editable={true}  //change length of event by dragging the event down. Change day of event by dragging\r\n            // eventContent={this.renderEventContent}\r\n            // eventDrop={this.handleEventDrop}\r\n            // eventClick={this.handleEventClick}\r\n            // select={this.handleDateSelect}\r\n            //eventClick = {function(calendarEvents, jsEvent, view, resourceObj) {alert(courses.name)}}\r\n            ref={this.calendarComponentRef}\r\n            weekends={this.state.calendarWeekends}\r\n            //events={this.state.calendarEvents}\r\n            events={this.state.events}    //Funktioniert theoretisch. \r\n            dateClick={this.handleDateClick}\r\n            \r\n \r\n          />\r\n        </div>\r\n       </div>\r\n    );\r\n  }\r\n\r\n  // handleEventClick = (info) => {\r\n  //   alert('Event: ' + info.event.name);\r\n  // }\r\n\r\n  handleDateClick = (arg) => {\r\n    var dateStr = prompt('Enter a date in YYYY-MM-DD format');\r\n    var date = new Date(arg.dateStr + 'T00:00:00'); \r\n\r\n    if (!isNaN(date.valueOf())) { // valid?\r\n      fitnessplan.addEvent({\r\n        title: 'dynamic event',\r\n        start: date,\r\n        allDay: true\r\n      });\r\n      alert('Great. Now, update your database...');\r\n    } else {\r\n      alert('Invalid date.');\r\n    }\r\n\r\n    //calendarApi.unselect() // clear date selection\r\n\r\n    // if (name) {\r\n    //   calendarApi.addEvent({\r\n    //     id:\"\",\r\n    //     name,\r\n    //     start: selectInfo.startStr,\r\n    //     end: selectInfo.endStr,\r\n    //     allDay: selectInfo.allDay\r\n    //   })\r\n    // }\r\n  }\r\n\r\n  // renderEventContent(eventInfo) {\r\n  //   return (\r\n  //     <>\r\n  //       <b>{\"hey\"}</b>\r\n  //       <i>{\"hu\"}</i>\r\n  //     </>\r\n  //   )\r\n  // }\r\n  \r\n\r\n  toggleWeekends = () => {\r\n    this.setState({\r\n      // update a property\r\n      calendarWeekends: !this.state.calendarWeekends,\r\n    });\r\n  };\r\n\r\n  gotoPast = () => {\r\n    let calendarApi = this.calendarComponentRef.current.getApi();\r\n    calendarApi.gotoDate(\"2020-01-01\"); // call a method on the Calendar object\r\n  };\r\n\r\n//  handleDateClick = (arg) => {\r\n//     if (\r\n//       window.confirm(\"Would you like to add an event to \" + arg.dateStr + \" ?\")\r\n//     ) {\r\n//       this.setState({\r\n//         // add new event data\r\n//         events: this.state.events.concat({\r\n//           // creates a new array\r\n//           title: \"New Event\",\r\n//           start: arg.date,\r\n//           allDay: arg.allDay,\r\n//         }),\r\n//       });\r\n//     }\r\n//   }; \r\n}\r\n"]},"metadata":{},"sourceType":"module"}